import asyncio
import logging
import aioschedule
# import DBwork
from _multiprocessing import send
from faulthandler import is_enabled
#import noti

import schedule
from Tools.scripts.finddiv import process

from aiogram import Bot, Dispatcher, executor, types
from datetime import date, time
import time
# import DBwork
from aiogram.dispatcher.middlewares import LifetimeControllerMiddleware
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import TelegramObject

from murkups import mainMenu, trainingMenu, choosing_what_muscles_Menu, set_time_menu, set_time_callback_menu, mail_menu
from aiogram.types import message
from aiogram.utils.markdown import text
from apscheduler.schedulers.blocking import BlockingScheduler
from datetime import date
from apscheduler.schedulers.blocking import BlockingScheduler
import os



bot = Bot(token="2047866716:AAFVUm0e1lnt_PWuYuQAEMHK6W_7SJUMJqo")
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

#data = " "
user_id = 665724594
#what_muscles = "back"


async def notif(what_muscles):
    # await bot.send_message(text="—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!!!", chat_id=user_id)
    if (what_muscles == "arms"):
        await bot.send_message(text="–¥–ª—è —Ä—É–∫", chat_id=user_id)
    elif (what_muscles == "legs"):
        await bot.send_message(text="–¥–ª—è –Ω–æ–≥", chat_id=user_id)
    elif (what_muscles == "back"):
        await bot.send_message(text="—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Å–ø–∏–Ω—ã", chat_id=user_id)


async def scheduler(data, what_muscles):
    aioschedule.every(data).seconds.do(notif, what_muscles=what_muscles)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


'''
async def notif():
    await bot.send_message(text="—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!!", chat_id=665724594)

async def scheduler():
    aioschedule.every().day.at("13:18").do(notif)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def on_startup(_):
    asyncio.create_task(scheduler())
'''


# ----------------/start-----------

@dp.message_handler(commands="start")
async def say_hello(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–Ø –ø–æ–º–æ–≥–∞—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º", reply_markup=mainMenu)


#                                   ----------------main_menu-----------
@dp.message_handler()
async def main_screen(message: types.Message):
    what_muscles = "legs"
    if message.text == "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üí™üèª":
        await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–ª—è ...", reply_markup=trainingMenu)
    elif message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ":
        await message.answer(
            "–¢—Ä–µ–Ω–µ—Ä - –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.\n–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å –≤ "
            "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞ —ç—Ç—É –ø–æ—á—Ç—É:\n",
            reply_markup=mail_menu)

    #                                    ----------------trainings_menu-----------

    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥", reply_markup=mainMenu)
    elif message.text == "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü", reply_markup=choosing_what_muscles_Menu)

    #                                    ----------------choose_muscles_menu-----------

    elif message.text == "–†—É–∫–∏":
        await message.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ä—É–∫", reply_markup=set_time_menu)
        what_muscles = "arms"
    elif message.text == "–ù–æ–≥–∏":
        await message.answer("—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –Ω–æ–≥", reply_markup=set_time_menu)
        what_muscles = "legs"
        #user_id = message.from_user.id
        # await DBwork.trainings_add_first(date="None", time="None", user_id=user_id, type_of_exercise="–ù–æ–≥–∏")
    elif message.text == "–°–ø–∏–Ω–∞":
        await message.answer("—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Å–ø–∏–Ω—ã", reply_markup=set_time_menu)
        what_muscles = "back"
        #user_id = message.from_user.id
        # error = await DBwork.trainings_add_first(date="None", time="None", user_id=user_id, type_of_exercise="–°–ø–∏–Ω–∞")
    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥", reply_markup=mainMenu)

    #                                    ----------------set_time_menu-----------

    elif message.text == "–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏":
        await message.answer("–≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è")
        pass
    else:
        #global user_id
        user_id = message.from_user.id
        #global data
        '''global data
        data = message.text
        new_data = data
        data = '"'
        data = data + new_data + '"'
        print(data)'''
        data = 10
        notif(what_muscles)
        scheduler(10, what_muscles)
        '''
        async def notif():
            # await bot.send_message(text="—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!!!", chat_id=user_id)
            if (what_muscles == "arms"):
                await bot.send_message(text="–¥–ª—è —Ä—É–∫", chat_id=user_id)
            elif (what_muscles == "legs"):
                await bot.send_message(text="–¥–ª—è –Ω–æ–≥", chat_id=user_id)
            elif (what_muscles == "back"):
                await bot.send_message(text="—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Å–ø–∏–Ω—ã", chat_id=user_id)

        async def scheduler():
            aioschedule.every(data).seconds.do(notif)
            while True:
                await aioschedule.run_pending()
                await asyncio.sleep(1)
        '''

async def on_startup(_):
    asyncio.create_task(scheduler(10, what_muscles))

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)
